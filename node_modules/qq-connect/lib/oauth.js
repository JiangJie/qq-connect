var url = require('url'),
	https = require('https'),
	querystring = require('querystring');
var config = require('./config'),
	utils = require('./utils'),
	session = require('./session');

var accessTokenURL = 'https://graph.qq.com/oauth2.0/token',
	appidUrl = 'https://graph.qq.com/oauth2.0/me',
	authorizeURL = 'https://graph.qq.com/oauth2.0/authorize';

var qq_login = function(req, res, callback) {
	var sessionObject = session.createSession();
	var loginUrl = authorizeURL + '?response_type=code&client_id=' + config.appid +
		'&redirect_uri=' + encodeURIComponent(callback || config.callback) +
		'&state=' + sessionObject.state +
		'&scope=' + config.scope +
		'&sessionid=100';
	var cookieStr = session.serialize('qc_session_id', sessionObject.sessionid) + ';' + req.headers.cookie;
	// res.writeHead(200, {
 //    'Set-Cookie': cookieStr
 //  });
  res.writeHead(302, {
  	'Set-Cookie': cookieStr,
	  'Location': loginUrl
	});
	res.end();
	//return loginUrl;
};
var qq_callback = function(reqorquery, cb, er) {
	if (typeof reqorquery === 'object') {
		var state, code, qc_session_id;
		if(reqorquery.qc_session_id && reqorquery.state && reqorquery.code) {
			qc_session_id = reqorquery.qc_session_id,
			state = reqorquery.state,
			code = reqorquery.code;
		} else {
			try {
				var query = url.parse(reqorquery.url, true).query;
				state = query.state,
				code = query.code,
				qc_session_id = session.parse(reqorquery.headers.cookie).qc_session_id;
			} catch(e) {
				er(e);
			}
		}
		if(session.getSession(qc_session_id) && (state === session.getSession(qc_session_id).state)) {
			var tokenUrl = accessTokenURL + '?grant_type=authorization_code&client_id=' + config.appid + 
				'&redirect_uri=' + encodeURIComponent(config.callback) + 
				'&client_secret=' + config.appkey + 
				'&code=' + code;
			https.get(tokenUrl, function(res) {
				var result = '';
				res.on('data', function(d) {
			    result += d;
			  });
			  res.on('end', function() {
			  	result = querystring.parse(result)
			  	cb(result);
			  });
			  res.on('error', function(e) {
			  	er(e);
			  });
			});
		} else {
			er('state not match or invalid');
		}
		session.removeSession(qc_session_id);
	} else {
		er('invalid params')
	}
};
var get_openid = function(accessToken, cb, er) {
	var callback = function(params) {
		return params;
	};
	if(typeof accessToken === 'string') {
		var graphUrl = appidUrl + '?access_token=' + accessToken;
		https.get(graphUrl, function(res) {
			var result = '';
			res.on('data', function(d) {
		    result += d;
		  });
		  res.on('end', function() {
		  	result = eval(result);
		  	cb(result);
		  });
		  res.on('error', function(e) {
		  	er(e);
		  });
		});
	} else {
		er('invalid accessToken')
	}
};
exports = module.exports = {
	qq_login: qq_login,
	qq_callback: qq_callback,
	get_openid: get_openid
};