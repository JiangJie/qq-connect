
/// Serialize the a name value pair into a cookie string suitable for
/// http headers. An optional options object specified cookie parameters
///
/// serialize('foo', 'bar', { httpOnly: true })
///   => "foo=bar; httpOnly"
///
/// @param {String} name
/// @param {String} val
/// @param {Object} options
/// @return {String}
var serialize = function(name, val, opt){
  var pairs = [name + '=' + encode(val)];
  opt = opt || {};
  if (opt.maxAge) pairs.push('Max-Age=' + opt.maxAge);
  if (opt.domain) pairs.push('Domain=' + opt.domain);
  if (opt.path) pairs.push('Path=' + opt.path);
  if (opt.expires) pairs.push('Expires=' + opt.expires.toUTCString());
  if (opt.httpOnly) pairs.push('HttpOnly');
  if (opt.secure) pairs.push('Secure');
  return pairs.join('; ');
};
/// Parse the given cookie header string into an object
/// The object has the various cookies as keys(names) => values
/// @param {String} str
/// @return {Object}
var parse = function(str) {
  var obj = {}
  var pairs = str.split(/[;,] */);
  pairs.forEach(function(pair) {
    var eq_idx = pair.indexOf('=')
    var key = pair.substr(0, eq_idx).trim()
    var val = pair.substr(++eq_idx, pair.length).trim();
        // quoted values
        if ('"' == val[0]) {
          val = val.slice(1, -1);
        }
        // only assign once
        if (undefined == obj[key]) {
          obj[key] = decode(val);
        }
      });
  return obj;
};
var encode = encodeURIComponent;
var decode = decodeURIComponent;

var utils = require('./utils');
var session = [];
var createSession = function() {
  var sessionid = utils.createSessionid(),
  state = utils.createState();
  var sessionObject = {sessionid: sessionid, state: state};
  session.push(sessionObject);
  return sessionObject;
};
var removeSession = function(sessionid) {
  session.forEach(function(item, index) {
    if(item.sessionid === sessionid) {
      session.splice(index, 1);
      return;
    }
  });
};
var getSession = function(sessionid) {
  var result = null;
  session.forEach(function(item) {
    if(item.sessionid === sessionid) {
      result = item;
    }
  });
  return result;
};
var getAllSession = function() {
  return session;
}
exports = module.exports = {
  serialize: serialize,
  parse: parse,
  createSession: createSession,
  removeSession: removeSession,
  getSession: getSession,
  getAllSession: getAllSession
};